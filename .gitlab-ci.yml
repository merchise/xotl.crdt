---
variables:
  PYTHON_VERSION: "3.12"

stages:
  - test
  - build
  - publish
  - clean up

lint:
  image: python:$PYTHON_VERSION
  script:
    - pip install -r requirements-dev.lock
    - ruff check src/
    - ruff format --check src/
    - isort --check --diff src/
  stage: test
  allow_failure: true
  only:
    refs:
      - main
      - merge_requests
    changes:
      - pyproject.toml
      - src/**/*.py

.run_tox_tests: &run_tox_tests
  image: python:$PYTHON
  stage: test
  script:
    - pip install tox
    - tox -e system-unit

tests:
  <<: *run_tox_tests
  parallel:
    matrix:
      - PYTHON: ["3.11", "3.12", "3.10"]
  only:
    refs:
      - main
      - merge_request
    changes:
      - pyproject.toml
      - src/**/*.py


.run_tox_staticcheck: &run_tox_staticcheck
  image: python:$PYTHON_VERSION
  stage: test
  script:
    - pip install tox
    - tox -e system-staticcheck

run static checks:
  <<: *run_tox_staticcheck
  only:
    refs:
      - main
      - merge_request
    changes:
      - pyproject.toml
      - src/**/*.py

.run_tox_doctest: &run_tox_doctest
  image: python:$PYTHON_VERSION
  stage: test
  script:
    - pip install tox
    - tox -e system-doctest

run doctests:
  <<: *run_tox_doctest
  only:
    refs:
      - main
      - merge_request
    changes:
      - pyproject.toml
      - src/**/*.py
      - docs/**/*.rst

run coverage tests:
  image: python:$PYTHON_VERSION
  stage: test
  script:
    - pip install tox
    - tox -e system-coverage
  allow_failure: true
  only:
    refs:
      - main
      - merge_request
    changes:
      - pyproject.toml
      - src/**/*.py

build distribution:
  image: python:$PYTHON_VERSION
  stage: build
  script:
    - apt-get update; apt-get install -y --no-install-recommends git make
    - pip install hatch
    - hatch build
  artifacts:
    paths:
      - dist/
  only:
    refs:
      - main
      - merge_request

publish_pypi:
  image: python:$PYTHON_VERSION
  stage: publish
  script:
    - pip install twine
    - twine upload -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD" dist/*
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /^\d+(\.\d+)*(|a\d+|b\d+|rc\d+)?(\.post\d+)?$/
  dependencies:
    - build distribution
  environment:
    name: pypi
    url: https://pypi.python.org/pypi/$CI_PROJECT_NAME


.build_doc: &build-documentation
  image: python:$PYTHON_VERSION
  script:
    - apt-get update; apt-get install -y --no-install-recommends git make
    - pip install -r requirements-dev.lock
    - make -C docs html
    - mkdir -p public
    - cp -r docs/build/html/* public/

build documentation:
  <<: *build-documentation
  stage: build
  interruptible: true
  needs:
    - run doctests
  only: &when-build-documentation-only
    refs:
      - main
      - merge_requests
    changes:
      - tox.ini
      - docs/source/conf.py
      - docs/**/*.rst
      - src/**/*.py
    variables:
      - $CI_SERVER_HOST == "gitlab.merchise.org"

pages:
  <<: *build-documentation
  stage: build
  needs: []
  artifacts:
    paths:
      - public
  only:
    refs:
      - main
    variables:
      - $CI_SERVER_HOST == "gitlab.com"

publish in our rtd:
  interruptible: true
  variables:
    GIT_STRATEGY: none
  stage: publish
  needs:
    - build documentation
  image: alpine
  script:
    - |
      apk add openssh rsync
      mkdir -p $HOME/.ssh
      chmod 700 $HOME/.ssh
      cp $RSA_KEY_FILE $HOME/.ssh/id_rsa
      chmod 600 $HOME/.ssh/id_rsa
      cp $SSH_CONFIG_FILE $HOME/.ssh/config
      ssh docs.lahavane.com mkdir -p /data/$CI_PROJECT_NAME/.$CI_COMMIT_SHA
      rsync -auvp -e ssh docs/build/html/ docs.lahavane.com:/data/$CI_PROJECT_NAME/.$CI_COMMIT_SHA/
      ssh docs.lahavane.com "cd /data/$CI_PROJECT_NAME; rm -r $CI_COMMIT_REF_NAME; ln -s .$CI_COMMIT_SHA $CI_COMMIT_REF_NAME"
      ssh docs.lahavane.com "cd /data/$CI_PROJECT_NAME; ls -al | grep -oE '\.([0-9]|[a-z])*$' | sort | uniq -c | grep '1 ' | grep -oE '\.([0-9]|[a-z])*$' | xargs rm -rf"
  environment:
    name: docs.lahavane.com
    url: http://docs.lahavane.com/$CI_PROJECT_NAME/$CI_COMMIT_REF_NAME
  only:
    <<: *when-build-documentation-only


clean-up RTD:
  stage: clean up
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_SERVER_HOST == "gitlab.merchise.org"'
      when: on_success
    - when: never
  trigger:
    include: ci/cleanup.yml
